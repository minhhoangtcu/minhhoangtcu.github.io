<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Minh</title>
    <description>Personal Blog</description>
    <link>http://minhhoangtcu.github.io//</link>
    <atom:link href="http://minhhoangtcu.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 04 Oct 2016 10:55:27 -0500</pubDate>
    <lastBuildDate>Tue, 04 Oct 2016 10:55:27 -0500</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Tweets of Joy and Fury 2016</title>
        <description>&lt;p&gt;Have you ever wondered what people talk about the 2016 Presidential debates? This iOS application parses and applies sentiment analysis in real time on Tweets related to Trump and Hillary. You can actually see Tweets popping up in your local area in real time!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/awernick/TweetsOfJoyAndFury2016&quot;&gt;Link to code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is the Github of my partner, he linked both the back-end and the client into it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://devpost.com/software/tweets-of-joy-and-fury-2016&quot;&gt;Link to Devpost&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;table-of-content&quot;&gt;Table of Content&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#logic-overview&quot;&gt;Logic Overview&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#getting-the-tweets&quot;&gt;Getting the Tweets&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#displaying-the-tweets&quot;&gt;Displaying the Tweets&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#implementation-details&quot;&gt;Implementation Details&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#prototyping&quot;&gt;Prototyping&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating-custome-info-windows&quot;&gt;Creating custom info windows&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#displaying-all-info-windows&quot;&gt;Displaying all info windows&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#requesting-the-tweets&quot;&gt;Requesting the Tweets&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#demo&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;logic-overview&quot;&gt;Logic Overview&lt;/h1&gt;
&lt;p&gt;In this project, I worked together with two other geniuses. One worked on the backend and the other on the data analysis. Thus, I will talk mostly about my work, which is the implementation of the front-end.&lt;/p&gt;

&lt;h2 id=&quot;getting-the-tweets&quot;&gt;Getting the Tweets&lt;/h2&gt;

&lt;p&gt;Firstly, we called Twitter’s API to get the Tweets. Of course, we had to pass in certain queries and parse the data in different ways. Lastly, we trained our model with Stanford’s data and applied sentiment analysis on it. To request the result, the client pushed its current location along with the radius of the current zoom level to the server, which will send back local Tweets accordingly.&lt;/p&gt;

&lt;h2 id=&quot;displaying-the-tweets&quot;&gt;Displaying the Tweets&lt;/h2&gt;

&lt;p&gt;We liked the idea of having Trump’s faces all other the map. Thus, for every negative Tweet, there would be an angry Trump on the map. The same idea applied to display happy Trump, sad Hillary, and happy Hillary. So, here they are, feast your eyes:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img width=&quot;100px&quot; src=&quot;../../image/tweets/clinton-happy.png&quot; alt=&quot;Clinton happy&quot; /&gt; &lt;img width=&quot;100px&quot; src=&quot;../../image/tweets/clinton-sad.png&quot; alt=&quot;clinton-sad&quot; /&gt; &lt;img width=&quot;100px&quot; src=&quot;../../image/tweets/trump-angry.png&quot; alt=&quot;trump-angry&quot; /&gt; &lt;img width=&quot;100px&quot; src=&quot;../../image/tweets/trump-proud.png&quot; alt=&quot;trump-proud&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, we also wanted to display live Tweets, so that the heads will pop up everytime, which would be really cool!&lt;/p&gt;

&lt;h1 id=&quot;implementation-details&quot;&gt;Implementation Details&lt;/h1&gt;
&lt;p&gt;This section is divided into multiple milestones. Each problem took considerable amout of time and had a profound impact on the project.&lt;/p&gt;

&lt;h2 id=&quot;prototyping&quot;&gt;Prototyping&lt;/h2&gt;
&lt;p&gt;Learning from the pit fall of my last side project, this time, I needed to have a prototype.&lt;/p&gt;

&lt;p&gt;And, I needed it fast! &lt;em&gt;In the end, it took me 3 hours, which is not ok&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Firstly, we discussed the purpose of the application and determined its features. Then, we drew some sketches and revised them continuously. Normally, during this prototyping process, people took designs from many places and modify them accordingly. I highly recommend using Photoshop/Keynote to modify designs on &lt;a href=&quot;http://pttrns.com/&quot;&gt;pttrns&lt;/a&gt; and make it interactive with &lt;a href=&quot;https://www.invisionapp.com/&quot;&gt;inVision&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are the raw designs and their modifications side by side:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img width=&quot;350px&quot; src=&quot;../../image/tweets/mapscreen.jpg&quot; alt=&quot;mapscreen&quot; /&gt; &lt;img width=&quot;350px&quot; src=&quot;../../image/tweets/mapscreen-processed.png&quot; alt=&quot;mapscreen-processed&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img width=&quot;350px&quot; src=&quot;../../image/tweets/infoscreen.jpg&quot; alt=&quot;infoscreen&quot; /&gt; &lt;img width=&quot;350px&quot; src=&quot;../../image/tweets/infoscreen-processed.png&quot; alt=&quot;infoscreen-processed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please note that although, it took 3 hours in total, creating the faces with Photoshop took over 70% already. Modifying the designs and creating an interactive prototype took little to no time. Here is a really cool video by Apple about prototyping: &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2014/223/&quot;&gt;Prototyping: Fake it til you make it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this section, I left out the part when I ran around and asked people for their experience in using the app. That was important too, the final design you saw above was not my first attempt. It had gone through many iterations with feedback. Since, this was my first time doing this, I will save the talk for the next blog, when I have more experience.&lt;/p&gt;

&lt;h2 id=&quot;creating-custom-info-windows&quot;&gt;Creating custom info windows&lt;/h2&gt;
&lt;p&gt;This was very simple, the tutorials for it were scarce and mostly in Object-C. You can look through my code, everything should be inside the folder named &lt;em&gt;InfoWindow&lt;/em&gt; and the initialization will be inside class &lt;em&gt;MarkerCreator&lt;/em&gt;. Basically, you are going to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a xib&lt;/li&gt;
  &lt;li&gt;Create an extension to easily initialize the xib as a View&lt;/li&gt;
  &lt;li&gt;Init it and place into appropriate place&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some nice materials that I went through:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Question on StackOverflow: &lt;a href=&quot;http://stackoverflow.com/questions/16746765/custom-info-window-for-google-maps&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Init from XIB: &lt;a href=&quot;http://stackoverflow.com/questions/25513271/how-to-initialise-a-uiview-class-with-a-xib-file-in-swift-ios&quot;&gt;Link&lt;/a&gt;
)&lt;/li&gt;
  &lt;li&gt;Custom InfoWindows in Google Maps SDK for iOS: &lt;a href=&quot;https://www.youtube.com/watch?v=ILiBXYscsyY&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;displaying-all-the-windows&quot;&gt;Displaying all the windows&lt;/h2&gt;
&lt;p&gt;By far this was the hardest challenge for the entire project. Not only Google Maps SDK did not support the feature, but there was also almost no material on the subject. You can take a look at my &lt;em&gt;MarkerCreator&lt;/em&gt; class for the code, but here are the general ideas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google Maps SDK does not support displaying all the info windows (they do on Android), but they can display multiple markers on the map. We need to convert the info windows into an image.&lt;/li&gt;
  &lt;li&gt;Change the image of the marker to our newly info window images.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;requesting-the-tweets&quot;&gt;Requesting the Tweets&lt;/h2&gt;
&lt;p&gt;Whenever the user pan or zoom in with the map, we had to send the location at the center of the map along with its radius (pan level) to the server. The server would then send back a JSON object about the Tweets. Also, we did not want to send the locations too often, we needed only sending a new request once every 5 seconds.&lt;/p&gt;

&lt;p&gt;In our final project, we did not have the time to dispatch each received tweet asynchronously to display them slowly. But, the program could display ten tweets each time, so that still counted as semi-responsive, right? Lastly, for networking, I used Alamofire and swiftJSON.&lt;/p&gt;

&lt;h1 id=&quot;demo&quot;&gt;Demo&lt;/h1&gt;
&lt;p&gt;Here are some screen shoots of our final project.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img width=&quot;450px&quot; src=&quot;../../image/tweets/about-final.png&quot; alt=&quot;about-final&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img width=&quot;450px&quot; src=&quot;../../image/tweets/map-final.png&quot; alt=&quot;map-final&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img width=&quot;450px&quot; src=&quot;../../image/tweets/info-final.png&quot; alt=&quot;info-final&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 03 Oct 2016 00:00:00 -0500</pubDate>
        <link>http://minhhoangtcu.github.io//2016/tweets-of-joy-and-fury-2016/</link>
        <guid isPermaLink="true">http://minhhoangtcu.github.io//2016/tweets-of-joy-and-fury-2016/</guid>
        
        
      </item>
    
      <item>
        <title>Developer Diary - Inspire</title>
        <description>&lt;p&gt;I love photography. But, I do not enjoy it so much when I am out ideas on the field. Telling the model to stand still for me to think and walk around could become really awkward. Somtimes, the “feeling” just does not flow into us. This project serves to solve that issue.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/minhhoangtcu/Inspire&quot;&gt;Link to code&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;table-of-content&quot;&gt;Table of Content&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#logic-overview&quot;&gt;Logic Overview&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#why-current-apps-are-not-working&quot;&gt;Why current apps are not working?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#getting-the-images&quot;&gt;Getting the images&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#suggesting-songs&quot;&gt;Suggesting songs&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#deliverable-diary&quot;&gt;Deliverable Diary&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#first-week-fake-it-till-you-make-it&amp;quot;&quot;&gt;First week: “Fake It Till You Make It”&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;logic-overview&quot;&gt;Logic Overview&lt;/h1&gt;

&lt;h2 id=&quot;why-current-apps-are-not-working&quot;&gt;Why current apps are not working?&lt;/h2&gt;
&lt;p&gt;Because I often run out of ideas for poses or framing while taking portraits and since the app is for photographers with similar issue, &lt;strong&gt;it will request and collect only different kinds of portraits.&lt;/strong&gt; But, what are the problems with the apps that are already out there? Why can’t I just use them instead? Let’s inspect both the content and the GUI of some of the most popular apps currently on Apple Store.&lt;/p&gt;

&lt;h4 id=&quot;instagram&quot;&gt;Instagram&lt;/h4&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img width=&quot;450px&quot; src=&quot;../../image/inspire/screen-instagram.png&quot; alt=&quot;Instagram Screenshoot of beautiful images&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This looks fine, right?&lt;/p&gt;

&lt;p&gt;Well, not really. Here is why:&lt;/p&gt;

&lt;p&gt;Firstly, professionals do not post their photographs on Instagram and when they do, the quality is horrible. We cannot zoom in and most of the images are in 1:1 ratio (I will save the argument on why rectangular is not favourable for later).&lt;/p&gt;

&lt;p&gt;Also, there is no way to see the camera EXIF information. When most photographers check a photo, they immedietely look for the shuttle speed, aperature, etc (&lt;a href=&quot;https://www.youtube.com/playlist?list=PL5D68881416D27814&quot;&gt;here is a professional suggesting how important EXIF is in his series&lt;/a&gt;). Instagram does not have such feature.&lt;/p&gt;

&lt;p&gt;How about exploring new images on Instagram? You can try and search for the tag “portrait”, the results are just teenagers taking selfies. Even if we use instagram’s API to filter out the result, the two above problems still exist.&lt;/p&gt;

&lt;p&gt;After all, Instagram is not really intended for photographers anyway. So, it quite unfair to disect the app, but, analyzing a bad example is a good way to set expectations for the app.&lt;/p&gt;

&lt;h4 id=&quot;flickr&quot;&gt;Flickr&lt;/h4&gt;
&lt;p&gt;Although more professional post their photographs on here and we can actually see the EXIF information. It is not easy to access the EXIF info, we have to navigate through another screen to read more information. I want to design an application that displays the photo with the EXIF information.&lt;/p&gt;

&lt;p&gt;Flickr faces problems similarly to Instagram. It does not really offer an option for photographers to discover images. There is a feature that lists all trending tags. But, I do not want trending stuff, I just want to look for a specific set of stuff. In this case, we are trying to find only portraits.&lt;/p&gt;

&lt;p&gt;Since Flickr still has some decent photographs and EXIF information, it is still a good source for inspiration. In fact, our app will ultilize Flickr’s API and collect photos from here. But, we will have to add some filter to get a good image.&lt;/p&gt;

&lt;h4 id=&quot;px&quot;&gt;500px&lt;/h4&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img width=&quot;450px&quot; src=&quot;../../image/inspire/screen-500px.png&quot; alt=&quot;500px Screenshoot of beautiful categories&quot; /&gt;&lt;/p&gt;

&lt;p&gt;500px is my favourite.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;It actually categorizes the pictures! Also, the quality of the photographs is absolutely stunning. Unfortunately, similarly to Flickr, I cannot access the EXIF data without going to another screen. 500px is close, but, for our taste, it is not close enough. In our app, we will have these categories and also use their API to get the pictures.&lt;/p&gt;

&lt;h4 id=&quot;eyeem&quot;&gt;EyeEm&lt;/h4&gt;

&lt;p&gt;EyeEm is actually a little bit special. It main feature is suggesting users to explore specific photographers or albums based on our interests. So, machine learning is definately heavily involved in there. Since this is the main feature of EyeEm, it does not categories photographs like what 500px does. However, EyeEm has a very interesting way to show image:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img width=&quot;450px&quot; src=&quot;../../image/inspire/screen-eyeem.png&quot; alt=&quot;EyeEm Screenshoot of tags with photo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the screenshoot above, we can see the picture’s tags below the photograph. This is semi helpful because sometimes we can see the information of the camera. For example, we instantly know that it is captured with a Sony A7 and at 55mm. But, we do not really want to see all those information. Firstly, it is distracting. There are too many taggs. If I were to redesign the application, I would show only a few of them. And, I will never show the obvious tags. “Girl”, “cute”, and “portrait” are not neccessary. Without reading the tags, I am pretty sure that there is a girl in the picture. Anyway, displaying helpful information is what our app is going for.&lt;/p&gt;

&lt;h2 id=&quot;getting-the-images&quot;&gt;Getting the images&lt;/h2&gt;
&lt;p&gt;(cont.)
&lt;!-- Techniques to get the images --&gt;&lt;/p&gt;

&lt;h2 id=&quot;suggesting-songs&quot;&gt;Suggesting songs&lt;/h2&gt;
&lt;p&gt;(cont.)
&lt;!-- Techniques to get the songs --&gt;&lt;/p&gt;

&lt;h1 id=&quot;deliverable-diary&quot;&gt;Deliverable Diary&lt;/h1&gt;
&lt;p&gt;(cont.)
&lt;!-- Why this section exist. For self reflection. --&gt;&lt;/p&gt;

&lt;h2 id=&quot;first-week-fake-it-till-you-make-it&quot;&gt;First week: “Fake It Till You Make It”&lt;/h2&gt;

&lt;p&gt;The first week was bad.&lt;/p&gt;

&lt;p&gt;I trashed the entire GUI of the app.&lt;/p&gt;

&lt;p&gt;Why? Take a look for yourself:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img width=&quot;450px&quot; src=&quot;../../image/inspire/screen-first-week-init-gui.png&quot; alt=&quot;Initial GUI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, what really happened? Let’s begin from the start.&lt;/p&gt;

&lt;h3 id=&quot;what-happen&quot;&gt;What happen?&lt;/h3&gt;

&lt;p&gt;To be honest, I had not experience network programming before. So, this application was what I had not done before. After settling down with the idea, I watched several tutorials about iOS networking (mostly on &lt;a href=&quot;https://www.udacity.com/course/ios-networking-with-swift--ud421&quot;&gt;Udacity&lt;/a&gt;). After spending out about 6 hours cramming down the materials, I go straight to the project.&lt;/p&gt;

&lt;p&gt;The app is straight foward, sending http request and receiving a JSON package with pictures’ URLs back. I had no difficult in implement the code for this part. However, it took me actually a lot of time to set up the GUI and to display the photos.&lt;/p&gt;

&lt;p&gt;I had absolutely no design in mind.&lt;/p&gt;

&lt;p&gt;(cont.)&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img width=&quot;450px&quot; src=&quot;../../image/inspire/screen-first-week-prototype-1.png&quot; alt=&quot;Initial GUI&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img width=&quot;450px&quot; src=&quot;../../image/inspire/screen-first-week-prototype-2.png&quot; alt=&quot;Initial GUI&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img width=&quot;450px&quot; src=&quot;../../image/inspire/screen-first-week-prototype-3.png&quot; alt=&quot;Initial GUI&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Sep 2016 00:00:00 -0500</pubDate>
        <link>http://minhhoangtcu.github.io//2016/inspire-developer-diary/</link>
        <guid isPermaLink="true">http://minhhoangtcu.github.io//2016/inspire-developer-diary/</guid>
        
        
      </item>
    
  </channel>
</rss>
